<?php
/**
 * DetectedLicensePlate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DetectedLicensePlate Class Doc Comment
 *
 * @category Class
 * @description License plate found in the image
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DetectedLicensePlate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetectedLicensePlate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'license_plate_text_best_match' => 'string',
        'license_plate_text_runner_up' => 'string',
        'location_x' => 'int',
        'location_y' => 'int',
        'width' => 'int',
        'height' => 'int',
        'license_plate_recognition_confidence_level' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'license_plate_text_best_match' => null,
        'license_plate_text_runner_up' => null,
        'location_x' => 'int32',
        'location_y' => 'int32',
        'width' => 'int32',
        'height' => 'int32',
        'license_plate_recognition_confidence_level' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'license_plate_text_best_match' => 'LicensePlateText_BestMatch',
        'license_plate_text_runner_up' => 'LicensePlateText_RunnerUp',
        'location_x' => 'LocationX',
        'location_y' => 'LocationY',
        'width' => 'Width',
        'height' => 'Height',
        'license_plate_recognition_confidence_level' => 'LicensePlateRecognitionConfidenceLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'license_plate_text_best_match' => 'setLicensePlateTextBestMatch',
        'license_plate_text_runner_up' => 'setLicensePlateTextRunnerUp',
        'location_x' => 'setLocationX',
        'location_y' => 'setLocationY',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'license_plate_recognition_confidence_level' => 'setLicensePlateRecognitionConfidenceLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'license_plate_text_best_match' => 'getLicensePlateTextBestMatch',
        'license_plate_text_runner_up' => 'getLicensePlateTextRunnerUp',
        'location_x' => 'getLocationX',
        'location_y' => 'getLocationY',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'license_plate_recognition_confidence_level' => 'getLicensePlateRecognitionConfidenceLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['license_plate_text_best_match'] = isset($data['license_plate_text_best_match']) ? $data['license_plate_text_best_match'] : null;
        $this->container['license_plate_text_runner_up'] = isset($data['license_plate_text_runner_up']) ? $data['license_plate_text_runner_up'] : null;
        $this->container['location_x'] = isset($data['location_x']) ? $data['location_x'] : null;
        $this->container['location_y'] = isset($data['location_y']) ? $data['location_y'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['license_plate_recognition_confidence_level'] = isset($data['license_plate_recognition_confidence_level']) ? $data['license_plate_recognition_confidence_level'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets license_plate_text_best_match
     *
     * @return string
     */
    public function getLicensePlateTextBestMatch()
    {
        return $this->container['license_plate_text_best_match'];
    }

    /**
     * Sets license_plate_text_best_match
     *
     * @param string $license_plate_text_best_match Text from the license plate, highest-confidence result
     *
     * @return $this
     */
    public function setLicensePlateTextBestMatch($license_plate_text_best_match)
    {
        $this->container['license_plate_text_best_match'] = $license_plate_text_best_match;

        return $this;
    }

    /**
     * Gets license_plate_text_runner_up
     *
     * @return string
     */
    public function getLicensePlateTextRunnerUp()
    {
        return $this->container['license_plate_text_runner_up'];
    }

    /**
     * Sets license_plate_text_runner_up
     *
     * @param string $license_plate_text_runner_up Alternate text from the license plate, based on second-highest-confidence result
     *
     * @return $this
     */
    public function setLicensePlateTextRunnerUp($license_plate_text_runner_up)
    {
        $this->container['license_plate_text_runner_up'] = $license_plate_text_runner_up;

        return $this;
    }

    /**
     * Gets location_x
     *
     * @return int
     */
    public function getLocationX()
    {
        return $this->container['location_x'];
    }

    /**
     * Sets location_x
     *
     * @param int $location_x X location of the left edge of the license plate, starting from the left edge of the photo (X = 0)
     *
     * @return $this
     */
    public function setLocationX($location_x)
    {
        $this->container['location_x'] = $location_x;

        return $this;
    }

    /**
     * Gets location_y
     *
     * @return int
     */
    public function getLocationY()
    {
        return $this->container['location_y'];
    }

    /**
     * Sets location_y
     *
     * @param int $location_y Y location of the top edge of the license plate, starting from the top edge of the photo (Y = 0)
     *
     * @return $this
     */
    public function setLocationY($location_y)
    {
        $this->container['location_y'] = $location_y;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width Width of the license plate's location in pixels
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Height of the license plate's location in pixels
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets license_plate_recognition_confidence_level
     *
     * @return double
     */
    public function getLicensePlateRecognitionConfidenceLevel()
    {
        return $this->container['license_plate_recognition_confidence_level'];
    }

    /**
     * Sets license_plate_recognition_confidence_level
     *
     * @param double $license_plate_recognition_confidence_level Confidence score on a range of 0.0 - 1.0 of the accuracy of the detected license plate, with higher scores being better; values about 0.75 are high confidence
     *
     * @return $this
     */
    public function setLicensePlateRecognitionConfidenceLevel($license_plate_recognition_confidence_level)
    {
        $this->container['license_plate_recognition_confidence_level'] = $license_plate_recognition_confidence_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


