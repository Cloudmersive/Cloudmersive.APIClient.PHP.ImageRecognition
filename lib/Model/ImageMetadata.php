<?php
/**
 * ImageMetadata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ImageMetadata Class Doc Comment
 *
 * @category Class
 * @description Metadata from an image
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageMetadata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImageMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'successful' => 'bool',
        'is_valid_image' => 'bool',
        'file_format' => 'string',
        'width' => 'int',
        'height' => 'int',
        'bit_depth' => 'int',
        'has_transparency' => 'bool',
        'color_space' => 'string',
        'exif_profile_name' => 'string',
        'exif_values' => '\Swagger\Client\Model\ImageMetadataExifValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'successful' => null,
        'is_valid_image' => null,
        'file_format' => null,
        'width' => 'int32',
        'height' => 'int32',
        'bit_depth' => 'int32',
        'has_transparency' => null,
        'color_space' => null,
        'exif_profile_name' => null,
        'exif_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'successful' => 'Successful',
        'is_valid_image' => 'IsValidImage',
        'file_format' => 'FileFormat',
        'width' => 'Width',
        'height' => 'Height',
        'bit_depth' => 'BitDepth',
        'has_transparency' => 'HasTransparency',
        'color_space' => 'ColorSpace',
        'exif_profile_name' => 'ExifProfileName',
        'exif_values' => 'ExifValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'successful' => 'setSuccessful',
        'is_valid_image' => 'setIsValidImage',
        'file_format' => 'setFileFormat',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'bit_depth' => 'setBitDepth',
        'has_transparency' => 'setHasTransparency',
        'color_space' => 'setColorSpace',
        'exif_profile_name' => 'setExifProfileName',
        'exif_values' => 'setExifValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'successful' => 'getSuccessful',
        'is_valid_image' => 'getIsValidImage',
        'file_format' => 'getFileFormat',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'bit_depth' => 'getBitDepth',
        'has_transparency' => 'getHasTransparency',
        'color_space' => 'getColorSpace',
        'exif_profile_name' => 'getExifProfileName',
        'exif_values' => 'getExifValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['successful'] = isset($data['successful']) ? $data['successful'] : null;
        $this->container['is_valid_image'] = isset($data['is_valid_image']) ? $data['is_valid_image'] : null;
        $this->container['file_format'] = isset($data['file_format']) ? $data['file_format'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['bit_depth'] = isset($data['bit_depth']) ? $data['bit_depth'] : null;
        $this->container['has_transparency'] = isset($data['has_transparency']) ? $data['has_transparency'] : null;
        $this->container['color_space'] = isset($data['color_space']) ? $data['color_space'] : null;
        $this->container['exif_profile_name'] = isset($data['exif_profile_name']) ? $data['exif_profile_name'] : null;
        $this->container['exif_values'] = isset($data['exif_values']) ? $data['exif_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets successful
     *
     * @return bool
     */
    public function getSuccessful()
    {
        return $this->container['successful'];
    }

    /**
     * Sets successful
     *
     * @param bool $successful True if the operation was successful, false otherwise
     *
     * @return $this
     */
    public function setSuccessful($successful)
    {
        $this->container['successful'] = $successful;

        return $this;
    }

    /**
     * Gets is_valid_image
     *
     * @return bool
     */
    public function getIsValidImage()
    {
        return $this->container['is_valid_image'];
    }

    /**
     * Sets is_valid_image
     *
     * @param bool $is_valid_image True if the input image is a valid image file, false otherwise
     *
     * @return $this
     */
    public function setIsValidImage($is_valid_image)
    {
        $this->container['is_valid_image'] = $is_valid_image;

        return $this;
    }

    /**
     * Gets file_format
     *
     * @return string
     */
    public function getFileFormat()
    {
        return $this->container['file_format'];
    }

    /**
     * Sets file_format
     *
     * @param string $file_format File format of the image
     *
     * @return $this
     */
    public function setFileFormat($file_format)
    {
        $this->container['file_format'] = $file_format;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width Width of the image in pixels
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Height of the image in pixels
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets bit_depth
     *
     * @return int
     */
    public function getBitDepth()
    {
        return $this->container['bit_depth'];
    }

    /**
     * Sets bit_depth
     *
     * @param int $bit_depth Bits per pixel
     *
     * @return $this
     */
    public function setBitDepth($bit_depth)
    {
        $this->container['bit_depth'] = $bit_depth;

        return $this;
    }

    /**
     * Gets has_transparency
     *
     * @return bool
     */
    public function getHasTransparency()
    {
        return $this->container['has_transparency'];
    }

    /**
     * Sets has_transparency
     *
     * @param bool $has_transparency True if the image has transaprency in the form of an alpha channel, false otherwise
     *
     * @return $this
     */
    public function setHasTransparency($has_transparency)
    {
        $this->container['has_transparency'] = $has_transparency;

        return $this;
    }

    /**
     * Gets color_space
     *
     * @return string
     */
    public function getColorSpace()
    {
        return $this->container['color_space'];
    }

    /**
     * Sets color_space
     *
     * @param string $color_space Color space of the image
     *
     * @return $this
     */
    public function setColorSpace($color_space)
    {
        $this->container['color_space'] = $color_space;

        return $this;
    }

    /**
     * Gets exif_profile_name
     *
     * @return string
     */
    public function getExifProfileName()
    {
        return $this->container['exif_profile_name'];
    }

    /**
     * Sets exif_profile_name
     *
     * @param string $exif_profile_name Name of the EXIF profile used
     *
     * @return $this
     */
    public function setExifProfileName($exif_profile_name)
    {
        $this->container['exif_profile_name'] = $exif_profile_name;

        return $this;
    }

    /**
     * Gets exif_values
     *
     * @return \Swagger\Client\Model\ImageMetadataExifValue[]
     */
    public function getExifValues()
    {
        return $this->container['exif_values'];
    }

    /**
     * Sets exif_values
     *
     * @param \Swagger\Client\Model\ImageMetadataExifValue[] $exif_values EXIF tags and values embedded in the image
     *
     * @return $this
     */
    public function setExifValues($exif_values)
    {
        $this->container['exif_values'] = $exif_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


