<?php
/**
 * FaceWithLandmarks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FaceWithLandmarks Class Doc Comment
 *
 * @category Class
 * @description Location of one face in an image
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FaceWithLandmarks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FaceWithLandmarks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'left_x' => 'int',
        'top_y' => 'int',
        'right_x' => 'int',
        'bottom_y' => 'int',
        'left_eyebrow' => '\Swagger\Client\Model\FacePoint[]',
        'right_eyebrow' => '\Swagger\Client\Model\FacePoint[]',
        'left_eye' => '\Swagger\Client\Model\FacePoint[]',
        'right_eye' => '\Swagger\Client\Model\FacePoint[]',
        'bottom_and_sides_of_face' => '\Swagger\Client\Model\FacePoint[]',
        'nose_bridge' => '\Swagger\Client\Model\FacePoint[]',
        'nose_bottom' => '\Swagger\Client\Model\FacePoint[]',
        'lips_inner_outline' => '\Swagger\Client\Model\FacePoint[]',
        'lips_outer_outline' => '\Swagger\Client\Model\FacePoint[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'left_x' => 'int32',
        'top_y' => 'int32',
        'right_x' => 'int32',
        'bottom_y' => 'int32',
        'left_eyebrow' => null,
        'right_eyebrow' => null,
        'left_eye' => null,
        'right_eye' => null,
        'bottom_and_sides_of_face' => null,
        'nose_bridge' => null,
        'nose_bottom' => null,
        'lips_inner_outline' => null,
        'lips_outer_outline' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'left_x' => 'LeftX',
        'top_y' => 'TopY',
        'right_x' => 'RightX',
        'bottom_y' => 'BottomY',
        'left_eyebrow' => 'LeftEyebrow',
        'right_eyebrow' => 'RightEyebrow',
        'left_eye' => 'LeftEye',
        'right_eye' => 'RightEye',
        'bottom_and_sides_of_face' => 'BottomAndSidesOfFace',
        'nose_bridge' => 'NoseBridge',
        'nose_bottom' => 'NoseBottom',
        'lips_inner_outline' => 'LipsInnerOutline',
        'lips_outer_outline' => 'LipsOuterOutline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'left_x' => 'setLeftX',
        'top_y' => 'setTopY',
        'right_x' => 'setRightX',
        'bottom_y' => 'setBottomY',
        'left_eyebrow' => 'setLeftEyebrow',
        'right_eyebrow' => 'setRightEyebrow',
        'left_eye' => 'setLeftEye',
        'right_eye' => 'setRightEye',
        'bottom_and_sides_of_face' => 'setBottomAndSidesOfFace',
        'nose_bridge' => 'setNoseBridge',
        'nose_bottom' => 'setNoseBottom',
        'lips_inner_outline' => 'setLipsInnerOutline',
        'lips_outer_outline' => 'setLipsOuterOutline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'left_x' => 'getLeftX',
        'top_y' => 'getTopY',
        'right_x' => 'getRightX',
        'bottom_y' => 'getBottomY',
        'left_eyebrow' => 'getLeftEyebrow',
        'right_eyebrow' => 'getRightEyebrow',
        'left_eye' => 'getLeftEye',
        'right_eye' => 'getRightEye',
        'bottom_and_sides_of_face' => 'getBottomAndSidesOfFace',
        'nose_bridge' => 'getNoseBridge',
        'nose_bottom' => 'getNoseBottom',
        'lips_inner_outline' => 'getLipsInnerOutline',
        'lips_outer_outline' => 'getLipsOuterOutline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['left_x'] = isset($data['left_x']) ? $data['left_x'] : null;
        $this->container['top_y'] = isset($data['top_y']) ? $data['top_y'] : null;
        $this->container['right_x'] = isset($data['right_x']) ? $data['right_x'] : null;
        $this->container['bottom_y'] = isset($data['bottom_y']) ? $data['bottom_y'] : null;
        $this->container['left_eyebrow'] = isset($data['left_eyebrow']) ? $data['left_eyebrow'] : null;
        $this->container['right_eyebrow'] = isset($data['right_eyebrow']) ? $data['right_eyebrow'] : null;
        $this->container['left_eye'] = isset($data['left_eye']) ? $data['left_eye'] : null;
        $this->container['right_eye'] = isset($data['right_eye']) ? $data['right_eye'] : null;
        $this->container['bottom_and_sides_of_face'] = isset($data['bottom_and_sides_of_face']) ? $data['bottom_and_sides_of_face'] : null;
        $this->container['nose_bridge'] = isset($data['nose_bridge']) ? $data['nose_bridge'] : null;
        $this->container['nose_bottom'] = isset($data['nose_bottom']) ? $data['nose_bottom'] : null;
        $this->container['lips_inner_outline'] = isset($data['lips_inner_outline']) ? $data['lips_inner_outline'] : null;
        $this->container['lips_outer_outline'] = isset($data['lips_outer_outline']) ? $data['lips_outer_outline'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets left_x
     *
     * @return int
     */
    public function getLeftX()
    {
        return $this->container['left_x'];
    }

    /**
     * Sets left_x
     *
     * @param int $left_x X coordinate of the left side of the face
     *
     * @return $this
     */
    public function setLeftX($left_x)
    {
        $this->container['left_x'] = $left_x;

        return $this;
    }

    /**
     * Gets top_y
     *
     * @return int
     */
    public function getTopY()
    {
        return $this->container['top_y'];
    }

    /**
     * Sets top_y
     *
     * @param int $top_y Y coordinate of the top side of the face
     *
     * @return $this
     */
    public function setTopY($top_y)
    {
        $this->container['top_y'] = $top_y;

        return $this;
    }

    /**
     * Gets right_x
     *
     * @return int
     */
    public function getRightX()
    {
        return $this->container['right_x'];
    }

    /**
     * Sets right_x
     *
     * @param int $right_x X coordinate of the right side of the face
     *
     * @return $this
     */
    public function setRightX($right_x)
    {
        $this->container['right_x'] = $right_x;

        return $this;
    }

    /**
     * Gets bottom_y
     *
     * @return int
     */
    public function getBottomY()
    {
        return $this->container['bottom_y'];
    }

    /**
     * Sets bottom_y
     *
     * @param int $bottom_y Y coordinate of the bottom side of the face
     *
     * @return $this
     */
    public function setBottomY($bottom_y)
    {
        $this->container['bottom_y'] = $bottom_y;

        return $this;
    }

    /**
     * Gets left_eyebrow
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getLeftEyebrow()
    {
        return $this->container['left_eyebrow'];
    }

    /**
     * Sets left_eyebrow
     *
     * @param \Swagger\Client\Model\FacePoint[] $left_eyebrow Point locations of the left eyebrow (the eyebrow cloesest to the left side of the picture)
     *
     * @return $this
     */
    public function setLeftEyebrow($left_eyebrow)
    {
        $this->container['left_eyebrow'] = $left_eyebrow;

        return $this;
    }

    /**
     * Gets right_eyebrow
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getRightEyebrow()
    {
        return $this->container['right_eyebrow'];
    }

    /**
     * Sets right_eyebrow
     *
     * @param \Swagger\Client\Model\FacePoint[] $right_eyebrow Point locations of the right eyebrow (the eyebrow cloesest to the right side of the picture)
     *
     * @return $this
     */
    public function setRightEyebrow($right_eyebrow)
    {
        $this->container['right_eyebrow'] = $right_eyebrow;

        return $this;
    }

    /**
     * Gets left_eye
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getLeftEye()
    {
        return $this->container['left_eye'];
    }

    /**
     * Sets left_eye
     *
     * @param \Swagger\Client\Model\FacePoint[] $left_eye Point locations of the left eye (the eye closest to the left side of the picture)
     *
     * @return $this
     */
    public function setLeftEye($left_eye)
    {
        $this->container['left_eye'] = $left_eye;

        return $this;
    }

    /**
     * Gets right_eye
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getRightEye()
    {
        return $this->container['right_eye'];
    }

    /**
     * Sets right_eye
     *
     * @param \Swagger\Client\Model\FacePoint[] $right_eye Point locations of the right eye (the eye closest to the right side of the picture)
     *
     * @return $this
     */
    public function setRightEye($right_eye)
    {
        $this->container['right_eye'] = $right_eye;

        return $this;
    }

    /**
     * Gets bottom_and_sides_of_face
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getBottomAndSidesOfFace()
    {
        return $this->container['bottom_and_sides_of_face'];
    }

    /**
     * Sets bottom_and_sides_of_face
     *
     * @param \Swagger\Client\Model\FacePoint[] $bottom_and_sides_of_face Point locations of the bottom and sides of the face (cheeks and chin)
     *
     * @return $this
     */
    public function setBottomAndSidesOfFace($bottom_and_sides_of_face)
    {
        $this->container['bottom_and_sides_of_face'] = $bottom_and_sides_of_face;

        return $this;
    }

    /**
     * Gets nose_bridge
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getNoseBridge()
    {
        return $this->container['nose_bridge'];
    }

    /**
     * Sets nose_bridge
     *
     * @param \Swagger\Client\Model\FacePoint[] $nose_bridge Point locations of the nose bridge (the vertical portion of the nose)
     *
     * @return $this
     */
    public function setNoseBridge($nose_bridge)
    {
        $this->container['nose_bridge'] = $nose_bridge;

        return $this;
    }

    /**
     * Gets nose_bottom
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getNoseBottom()
    {
        return $this->container['nose_bottom'];
    }

    /**
     * Sets nose_bottom
     *
     * @param \Swagger\Client\Model\FacePoint[] $nose_bottom Point locations of the bottom (nostrils) of the nose
     *
     * @return $this
     */
    public function setNoseBottom($nose_bottom)
    {
        $this->container['nose_bottom'] = $nose_bottom;

        return $this;
    }

    /**
     * Gets lips_inner_outline
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getLipsInnerOutline()
    {
        return $this->container['lips_inner_outline'];
    }

    /**
     * Sets lips_inner_outline
     *
     * @param \Swagger\Client\Model\FacePoint[] $lips_inner_outline Point locations of the inner outline of the lips
     *
     * @return $this
     */
    public function setLipsInnerOutline($lips_inner_outline)
    {
        $this->container['lips_inner_outline'] = $lips_inner_outline;

        return $this;
    }

    /**
     * Gets lips_outer_outline
     *
     * @return \Swagger\Client\Model\FacePoint[]
     */
    public function getLipsOuterOutline()
    {
        return $this->container['lips_outer_outline'];
    }

    /**
     * Sets lips_outer_outline
     *
     * @param \Swagger\Client\Model\FacePoint[] $lips_outer_outline Point locations of the outer outline of the lips
     *
     * @return $this
     */
    public function setLipsOuterOutline($lips_outer_outline)
    {
        $this->container['lips_outer_outline'] = $lips_outer_outline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


